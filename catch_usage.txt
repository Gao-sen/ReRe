catch.py用途：
批量在基因序列中截取特定位置的序列片段，也可单个操作。

使用方法：
将catch.py和catch.csv以及test.fasta放置在同一文件夹中。
打开终端，进入目标文件夹路径，使用命令：python catch.py（Terminal :sudo python catch.py）
以运行程序。

代码大致流程：
1.在fasta中找到序列，并截取序列所在行的下一行开始到fasta的最后一行
2.预处理截取的片段，再从截取的片段中提取GH。G、H：待截取的目标序列在contig序列中的start、end位置
3.把结果写入results.fasta（或.txt)

注意事项：
Part1:
所有目标原基因序列汇总在一个fasta文件中,【因此请特别注意fasta文件中的contig名称不能重复】:
如果在fasta中没有找到目标序列的contig名称，会有提示报错；
如果在fasta中找到多个目标序列的contig名称，也会提示报错，

csv表中的序列信息必须与Genome集中的序列匹配，切勿删减碱基，保证字符个数。
A列可自行命名，如菌株名称。B列为截取序列的contigs名称，可以进行删减，不可增添字符，并且请【务必确保B在Genome集中呈现为唯一字符串。】
如目标序列的contig名称在Genome集为：“YZU01_NODE_1_cov.123_1_1”，而Genome集中存在另一个cogtings名称：“YZU01_NODE_1_cov.123_2”，
则填入csv表中的B列的contig名称可以修减为：“YZU01_NODE_1_cov.123_1_”或者“YZU01_NODE_1_cov.123_1”。
但若修减成“YZU01_NODE_1_cov.123_”，“YZU01_NODE_1_cov.123_2”也包含了此段字符串，会导致脚本报错。

Part2:
结果文件results.fasta（或.txt)的写入方式为“追加写入”（Append），即在文件末尾添加新的内容，不会影响文件原有的内容。
而不是“覆盖写入”（Write），覆盖写入会完全覆盖文件原有的内容。
因此每次运行此脚本时，请确保结果文件results.fasta（或.txt)为空，或者不存在（不存在的情况脚本会自行创建空的结果文件）。

Part3:
python版本为3.x.x
如果fasta文件很大，比如2GB以上，推荐使用安装了8G及以上内存的设备运行。

联系
